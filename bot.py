import asyncio
import base64
import json
import logging
from decimal import Decimal
from typing import Dict, Optional

import aiohttp
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from app.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.telegram_bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è aiohttp –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
http_session = None
pending_payments: Dict[str, dict] = {}
plan_cache: Dict[str, dict] = {}


def format_price(price_kopecks: Optional[int]) -> str:
    if price_kopecks is None:
        return "-"
    try:
        value = int(price_kopecks)
    except (TypeError, ValueError):
        return "-"
    rubles = Decimal(value) / Decimal(100)
    return f"{rubles:.2f} ‚ÇΩ"


def encode_payment_start_param(
    telegram_id: str,
    specialist_id: str,
    plan_type: str,
    price_kopecks: Optional[int],
    currency: str,
) -> str:
    safe_price = str(price_kopecks or "")
    raw = "|".join([
        "payment",
        telegram_id or "",
        specialist_id or "",
        plan_type or "",
        safe_price,
        currency or "RUB",
    ])
    encoded = base64.urlsafe_b64encode(raw.encode("utf-8")).decode("utf-8")
    return encoded.rstrip("=")


def get_payment_redirect_url(token: str, method: str) -> str:
    base_url = settings.api_url.rstrip("/")
    return f"{base_url}/api/telegram/pay?token={token}&method={method}"


def build_payment_keyboard(token: str) -> types.InlineKeyboardMarkup:
    bank_card_url = get_payment_redirect_url(token, "bank_card")
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                    url=bank_card_url,
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üì± –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü",
                    callback_data="payment:sbp",
                )
            ],
        ]
    )


def decode_payment_start_param(raw_param: str) -> Optional[dict]:
    if not raw_param:
        return None
    padding = "=" * (-len(raw_param) % 4)
    try:
        decoded = base64.urlsafe_b64decode((raw_param + padding).encode("utf-8")).decode("utf-8")
    except Exception:
        return None

    parts = decoded.split("|")
    if len(parts) < 6 or parts[0] != "payment":
        return None

    telegram_id = parts[1] or None
    specialist_id = parts[2] or None
    plan_type = parts[3] or None
    price_raw = parts[4] or None
    currency = parts[5] or "RUB"

    if not specialist_id or not plan_type:
        return None

    try:
        price_kopecks = int(price_raw) if price_raw else None
    except (TypeError, ValueError):
        price_kopecks = None

    return {
        "telegram_id": telegram_id,
        "specialist_id": specialist_id,
        "plan_type": plan_type,
        "price_kopecks": price_kopecks,
        "currency": currency,
    }


async def get_plan_details(plan_type: Optional[str]) -> Optional[dict]:
    if not plan_type:
        return None

    cached = plan_cache.get(plan_type)
    if cached:
        return cached

    session = await get_http_session()
    try:
        async with session.get(f"{settings.api_url}/api/subscriptions/plans") as response:
            if response.status != 200:
                return None
            plans = await response.json()
            for plan in plans:
                plan_type_value = plan.get("plan_type")
                if plan_type_value:
                    plan_cache[plan_type_value] = plan
            return plan_cache.get(plan_type)
    except Exception as exc:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤: %s", exc)
        return None


async def process_payment_command(chat_id: str, user_id: str, payload: dict):
    if not user_id:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    payload = dict(payload)
    payload["telegram_id"] = user_id

    specialist_id = payload.get("specialist_id")
    plan = payload.setdefault("plan", {})
    plan_type = plan.get("plan_type")

    if not specialist_id or not plan_type:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    plan_details = await get_plan_details(plan_type)
    if plan_details:
        plan.setdefault("name", plan_details.get("name"))
        plan.setdefault("price_kopecks", plan.get("price_kopecks") or plan_details.get("price"))
        plan.setdefault("currency", plan.get("currency") or "RUB")
        plan.setdefault("duration_days", plan.get("duration_days") or plan_details.get("duration_days"))

    pending_payments[user_id] = payload

    plan_name = plan.get("name") or plan_type
    price_text = format_price(plan.get("price_kopecks"))

    token = encode_payment_start_param(
        telegram_id=user_id,
        specialist_id=specialist_id,
        plan_type=plan_type,
        price_kopecks=plan.get("price_kopecks"),
        currency=plan.get("currency") or "RUB",
    )

    text_lines = [
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
        f"\n<b>–¢–∞—Ä–∏—Ñ:</b> {plan_name}",
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}",
        "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
    ]

    await bot.send_message(
        chat_id=chat_id,
        text="\n".join(text_lines),
        parse_mode="HTML",
        reply_markup=build_payment_keyboard(token),
        disable_web_page_preview=True,
    )
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", user_id)

async def get_http_session():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é HTTP —Å–µ—Å—Å–∏—é"""
    global http_session
    if http_session is None or http_session.closed:
        http_session = aiohttp.ClientSession()
    return http_session

async def close_http_session():
    """–ó–∞–∫—Ä—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é HTTP —Å–µ—Å—Å–∏—é"""
    global http_session
    if http_session and not http_session.closed:
        await http_session.close()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = str(message.from_user.id)
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã (user_id —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞)
        command_args = message.text.split() if message.text else []
        start_param = command_args[1] if len(command_args) > 1 else None

        decoded_payment = decode_payment_start_param(start_param or "") if start_param else None
        if decoded_payment:
            payload = {
                "specialist_id": decoded_payment.get("specialist_id"),
                "plan": {
                    "plan_type": decoded_payment.get("plan_type"),
                    "price_kopecks": decoded_payment.get("price_kopecks"),
                    "currency": decoded_payment.get("currency"),
                },
            }
            await process_payment_command(str(message.chat.id), user_id, payload)
            return

        specialist_user_id = start_param

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
        if specialist_user_id:
            await show_specialist_info(message, specialist_user_id)
            return
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        session = await get_http_session()
        try:
            async with session.get(f"{settings.api_url}/api/auth/user/{user_id}") as response:
                if response.status == 200:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    user_data = await response.json()
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App
                    await show_mini_app_button(message)
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
                    logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await register_new_user(message, user_id, username, first_name, last_name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."""
    try:
        raw_data = message.web_app_data.data
        payload = json.loads(raw_data)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å web_app_data: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if payload.get("command") != "payment":
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ web_app_data —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π: %s", payload.get("command"))
        return

    user_id = str(message.from_user.id)
    await process_payment_command(str(message.chat.id), user_id, payload)


@dp.callback_query(F.data.startswith("payment:"))
async def handle_payment_choice(callback: types.CallbackQuery):
    data = callback.data or ""
    _, method = data.split(":", maxsplit=1)
    user_id = str(callback.from_user.id)

    payload = pending_payments.get(user_id)
    if not payload:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
        await callback.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        return

    if method == "sbp":
        await callback.answer("–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        await callback.message.answer(
            "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π."
        )
        return

    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –≤—ã—à–µ", show_alert=True)

async def register_new_user(message: types.Message, user_id: str, username: str, first_name: str, last_name: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        session = await get_http_session()
        user_data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name
        }
        
        async with session.post(f"{settings.api_url}/api/auth/register", json=user_data) as response:
            if response.status == 200:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App
                await show_mini_app_button(message)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_specialist_info(message: types.Message, specialist_user_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ —á–µ—Ä–µ–∑ API
        session = await get_http_session()
        async with session.get(f"{settings.api_url}/api/specialists/{specialist_user_id}") as response:
            if response.status == 200:
                specialist_data = await response.json()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
                specialist_text = f"üë®‚Äç‚öïÔ∏è **{specialist_data.get('first_name', '')} {specialist_data.get('last_name', '')}**\n\n"
                
                if specialist_data.get('phone'):
                    specialist_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {specialist_data['phone']}\n"
                
                if specialist_data.get('description'):
                    specialist_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {specialist_data['description']}\n"
                
                specialist_text += "\nüíº –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ mini app
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º",
                                web_app=types.WebAppInfo(url=f"{settings.webapp_url}/specialist_view/{specialist_user_id}")
                            )
                        ]
                    ]
                )
                
                await message.answer(specialist_text, reply_markup=keyboard, parse_mode="Markdown")
                logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ {specialist_user_id}")
                
            else:
                await message.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
                logger.warning(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {specialist_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ {specialist_user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_mini_app_button(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Mini App"""
    try:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=types.WebAppInfo(url=settings.webapp_url)
                    )
                ]
            ]
        )
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–ù–∞–∑–Ω–∞—á—å¬ª! üéâ\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å.",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–Ω–æ–ø–∫–∏ Mini App: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        await close_http_session()

if __name__ == "__main__":
    asyncio.run(main())
