import json
import logging
from decimal import Decimal
from typing import Dict, Optional

import aiohttp
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.ext.asyncio import AsyncSession

from ..core.config import settings
from ..core.database import get_db
from ..services import SpecialistService
from ..services.telegram_bot import telegram_bot

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/telegram", tags=["telegram"])

pending_payments: Dict[str, dict] = {}


def format_price(price_kopecks: Optional[int]) -> str:
    if price_kopecks is None:
        return "-"
    rubles = Decimal(price_kopecks) / Decimal(100)
    return f"{rubles:.2f} ‚ÇΩ"


def get_create_payment_url() -> str:
    base_url = settings.webapp_url.rstrip("/")
    return f"{base_url}/api/subscriptions/create-payment"


def build_payment_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                    callback_data="payment:bank_card",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì± –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü",
                    callback_data="payment:sbp",
                )
            ],
        ]
    )


async def request_payment_link(payload: dict, method: str) -> dict:
    plan = payload.get("plan", {})
    price_kopecks = plan.get("price_kopecks")

    amount_decimal = None
    if price_kopecks is not None:
        amount_decimal = Decimal(price_kopecks) / Decimal(100)
    elif plan.get("amount") is not None:
        amount_decimal = Decimal(str(plan["amount"]))

    if amount_decimal is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞")

    request_json = {
        "amount": f"{amount_decimal:.2f}",
        "currency": plan.get("currency", "RUB"),
        "description": plan.get("name") or "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        "specialistId": payload.get("specialist_id"),
        "planType": plan.get("plan_type"),
        "planName": plan.get("name"),
        "priceKopecks": price_kopecks,
        "paymentMethod": method,
        "telegramId": payload.get("telegram_id"),
    }

    url = get_create_payment_url()
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=request_json) as response:
            data = await response.json()
            if response.status >= 400:
                raise ValueError(
                    data
                    if isinstance(data, str)
                    else data.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂")
                )
            return data


async def process_payment_command(chat_id: str, user_id: str, payload: dict):
    payload["telegram_id"] = user_id
    pending_payments[user_id] = payload

    plan = payload.get("plan", {})
    plan_name = plan.get("name", "–ø–æ–¥–ø–∏—Å–∫–∞")
    price_text = format_price(plan.get("price_kopecks"))

    text_lines = [
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
        f"\n<b>–¢–∞—Ä–∏—Ñ:</b> {plan_name}",
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}",
        "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
    ]

    await telegram_bot.bot.send_message(
        chat_id=chat_id,
        text="\n".join(text_lines),
        parse_mode="HTML",
        reply_markup=build_payment_keyboard(),
        disable_web_page_preview=True,
    )
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (webhook)", user_id)


async def process_payment_callback(callback_query: dict) -> bool:
    data = callback_query.get("data") or ""
    if not data.startswith("payment:"):
        return False

    _, method = data.split(":", maxsplit=1)
    callback_id = callback_query.get("id")
    from_user = callback_query.get("from") or {}
    user_id = str(from_user.get("id"))
    message = callback_query.get("message") or {}
    chat = message.get("chat") or {}
    chat_id = str(chat.get("id")) if chat.get("id") is not None else None
    message_id = message.get("message_id")

    payload = pending_payments.get(user_id)

    if not payload:
        await telegram_bot.bot.answer_callback_query(
            callback_id,
            text="–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑.",
            show_alert=True,
        )
        if chat_id:
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            )
        return True

    if method == "sbp":
        await telegram_bot.bot.answer_callback_query(
            callback_id,
            text="–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞",
            show_alert=True,
        )
        if chat_id:
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text="–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
            )
        return True

    if method != "bank_card":
        await telegram_bot.bot.answer_callback_query(
            callback_id,
            text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
            show_alert=True,
        )
        return True

    await telegram_bot.bot.answer_callback_query(callback_id)

    try:
        payment_response = await request_payment_link(payload, method)
    except ValueError as error:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ (webhook): %s", error)
        if chat_id:
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {error}",
            )
        return True
    except Exception as error:
        logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ (webhook)")
        if chat_id:
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
        return True

    confirmation_url = payment_response.get("confirmationUrl")
    payment_id = payment_response.get("paymentId")

    if not confirmation_url:
        logger.error("–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç confirmationUrl (webhook): %s", payment_response)
        if chat_id:
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
        return True

    pending_payments.pop(user_id, None)

    if chat_id and message_id:
        try:
            await telegram_bot.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None,
            )
        except Exception:
            pass

    button_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                    url=confirmation_url,
                )
            ]
        ]
    )

    plan = payload.get("plan", {})
    plan_name = plan.get("name", "–ø–æ–¥–ø–∏—Å–∫–∞")
    price_text = format_price(plan.get("price_kopecks"))
    header = f"–°—á—ë—Ç #{payment_id} —Å–æ–∑–¥–∞–Ω." if payment_id else "–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω."

    message_lines = [
        header,
        f"<b>–¢–∞—Ä–∏—Ñ:</b> {plan_name}",
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}",
        "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ÆKassa. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –º—ã –Ω–∞—á–∏—Å–ª–∏–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–∏—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
    ]

    if chat_id:
        await telegram_bot.bot.send_message(
            chat_id=chat_id,
            text="\n".join(message_lines),
            parse_mode="HTML",
            reply_markup=button_keyboard,
            disable_web_page_preview=True,
        )
    logger.info("–ü–ª–∞—Ç—ë–∂ %s —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (webhook)", payment_id, user_id)

    return True


@router.post("/webhook")
async def telegram_webhook(request: Request, db: AsyncSession = Depends(get_db)):
    """–í–µ–±—Ö—É–∫ –¥–ª—è Telegram. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –¥–∞–Ω–Ω—ã–µ –∏–∑ mini app –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != settings.telegram_webhook_secret:
        raise HTTPException(status_code=403, detail="Invalid secret token")

    data = await request.json()
    print("[webhook] update:", data)

    callback_query = data.get("callback_query")
    if callback_query:
        handled = await process_payment_callback(callback_query)
        if handled:
            return {"ok": True}

    message = data.get("message") or data.get("edited_message")
    if not message:
        return {"ok": True}

    web_app_data = message.get("web_app_data")
    if web_app_data:
        chat = message.get("chat") or {}
        chat_id = str(chat.get("id")) if chat.get("id") is not None else None
        from_user = message.get("from") or {}
        user_id = str(from_user.get("id"))

        try:
            payload = json.loads(web_app_data.get("data", "{}"))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å web_app_data: {e}")
            if chat_id:
                await telegram_bot.bot.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
            return {"ok": True}

        if payload.get("command") == "payment" and chat_id:
            await process_payment_command(chat_id, user_id, payload)
            return {"ok": True}

    chat = message.get("chat") or {}
    chat_id = str(chat.get("id"))
    text = message.get("text") or ""

    # /start
    if text.startswith("/start"):
        parts = text.split()
        # /start <user_id>
        if len(parts) > 1:
            specialist_user_id = parts[1]
            # –ë–µ—Ä–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            specialist_service = SpecialistService(db)
            specialist = await specialist_service.get_specialist_by_user_id(specialist_user_id)
            if specialist:
                if not specialist.chat_id:
                    specialist.chat_id = chat_id
                    await db.commit()

                first_name = specialist.first_name or ""
                last_name = specialist.last_name or ""
                phone = specialist.phone
                description = specialist.description

                lines = [f"üë®‚Äç‚öïÔ∏è {first_name} {last_name}".strip()]
                if phone:
                    lines.append(f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
                if description:
                    lines.append(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                lines.append("\nüíº –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
                text_msg = "\n".join(lines)

                # –ö–Ω–æ–ø–∫–∞ —Å web_app
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º",
                                web_app=WebAppInfo(url=f"{settings.webapp_url.rstrip('/')}/specialist_view/{specialist_user_id}")
                            )
                        ]
                    ]
                )
                await telegram_bot.bot.send_message(chat_id=chat_id, text=text_msg, reply_markup=kb, parse_mode="Markdown")
            else:
                await telegram_bot.bot.send_message(chat_id=chat_id, text="‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
        else:
            # /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            user = message.get("from") or {}
            user_id = str(user.get("id"))
            username = user.get("username")
            first_name = user.get("first_name")
            last_name = user.get("last_name")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±—ç–∫–µ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{settings.api_url}/api/auth/register",
                    json={
                        "telegram_id": user_id,
                        "username": username,
                        "first_name": first_name,
                        "last_name": last_name,
                    },
                ) as response:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    if response.status not in [200, 201]:
                        logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.status}")

            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            web_app=WebAppInfo(url=settings.webapp_url)
                        )
                    ]
                ]
            )
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text=(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–ù–∞–∑–Ω–∞—á—å¬ª! üéâ\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å."
                ),
                reply_markup=kb,
            )

    return {"ok": True}

# –î—É–±–ª–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–º —Å–ª—ç—à–µ–º –Ω–∞ —Å–ª—É—á–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
@router.post("/webhook/")
async def telegram_webhook_slash(request: Request, db: AsyncSession = Depends(get_db)):
    return await telegram_webhook(request, db)


@router.post("/set-webhook")
async def set_webhook():
    try:
        await telegram_bot.bot.set_webhook(
            url=settings.telegram_webhook_url,
            secret_token=settings.telegram_webhook_secret,
            drop_pending_updates=False,
        )
        info = await telegram_bot.bot.get_webhook_info()
        return {"ok": True, "info": info.model_dump()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/delete-webhook")
async def delete_webhook():
    try:
        await telegram_bot.bot.delete_webhook(drop_pending_updates=False)
        info = await telegram_bot.bot.get_webhook_info()
        return {"ok": True, "info": info.model_dump()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/webhook-info")
async def webhook_info():
    info = await telegram_bot.bot.get_webhook_info()
    return info.model_dump()
