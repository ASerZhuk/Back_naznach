from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.ext.asyncio import AsyncSession
from ..core.database import get_db
from ..core.config import settings
from ..services.telegram_bot import telegram_bot
from ..services import SpecialistService
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import aiohttp

router = APIRouter(prefix="/telegram", tags=["telegram"])


@router.post("/webhook")
async def telegram_webhook(request: Request, db: AsyncSession = Depends(get_db)):
    """–í–µ–±—Ö—É–∫ –¥–ª—è Telegram. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start –∏ /start <user_id>."""
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != settings.telegram_webhook_secret:
        raise HTTPException(status_code=403, detail="Invalid secret token")

    data = await request.json()
    print("[webhook] update:", data)
    message = data.get("message") or data.get("edited_message")
    if not message:
        return {"ok": True}

    chat = message.get("chat") or {}
    chat_id = str(chat.get("id"))
    text = message.get("text") or ""

    # /start
    if text.startswith("/start"):
        parts = text.split()
        # /start <user_id>
        if len(parts) > 1:
            specialist_user_id = parts[1]
            # –ë–µ—Ä–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            specialist_service = SpecialistService(db)
            specialist = await specialist_service.get_specialist_by_user_id(specialist_user_id)
            if specialist:
                if not specialist.chat_id:
                    specialist.chat_id = chat_id
                    await db.commit()

                first_name = specialist.first_name or ""
                last_name = specialist.last_name or ""
                phone = specialist.phone
                description = specialist.description

                lines = [f"üë®‚Äç‚öïÔ∏è {first_name} {last_name}".strip()]
                if phone:
                    lines.append(f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
                if description:
                    lines.append(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                lines.append("\nüíº –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
                text_msg = "\n".join(lines)

                # –ö–Ω–æ–ø–∫–∞ —Å web_app
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º",
                                web_app=WebAppInfo(url=f"{settings.webapp_url.rstrip('/')}/specialist_view/{specialist_user_id}")
                            )
                        ]
                    ]
                )
                await telegram_bot.bot.send_message(chat_id=chat_id, text=text_msg, reply_markup=kb, parse_mode="Markdown")
            else:
                await telegram_bot.bot.send_message(chat_id=chat_id, text="‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
        else:
            # /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            user = message.get("from") or {}
            user_id = str(user.get("id"))
            username = user.get("username")
            first_name = user.get("first_name")
            last_name = user.get("last_name")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±—ç–∫–µ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
            async with aiohttp.ClientSession() as session:
                await session.post(
                    f"{settings.api_url}/api/auth/register",
                    json={
                        "telegram_id": user_id,
                        "username": username,
                        "first_name": first_name,
                        "last_name": last_name,
                    },
                )

            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            web_app=WebAppInfo(url=settings.webapp_url)
                        )
                    ]
                ]
            )
            await telegram_bot.bot.send_message(
                chat_id=chat_id,
                text=(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–ù–∞–∑–Ω–∞—á—å¬ª! üéâ\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å."
                ),
                reply_markup=kb,
            )

    return {"ok": True}

# –î—É–±–ª–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–º —Å–ª—ç—à–µ–º –Ω–∞ —Å–ª—É—á–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
@router.post("/webhook/")
async def telegram_webhook_slash(request: Request, db: AsyncSession = Depends(get_db)):
    return await telegram_webhook(request, db)


@router.post("/set-webhook")
async def set_webhook():
    try:
        await telegram_bot.bot.set_webhook(
            url=settings.telegram_webhook_url,
            secret_token=settings.telegram_webhook_secret,
            drop_pending_updates=False,
        )
        info = await telegram_bot.bot.get_webhook_info()
        return {"ok": True, "info": info.model_dump()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/delete-webhook")
async def delete_webhook():
    try:
        await telegram_bot.bot.delete_webhook(drop_pending_updates=False)
        info = await telegram_bot.bot.get_webhook_info()
        return {"ok": True, "info": info.model_dump()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/webhook-info")
async def webhook_info():
    info = await telegram_bot.bot.get_webhook_info()
    return info.model_dump()


