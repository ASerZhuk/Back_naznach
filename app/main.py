from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from .api import appointments, services, users, specialists, auth, grafik, telegram, specialist_auth
from .api.subscriptions import router as subscriptions_router
from .api.specialist_pages import router as specialist_pages
from .core.database import engine, Base
import asyncio
import os
from .services.telegram_bot import telegram_bot
from .core.config import settings
from .core.database import AsyncSessionLocal
from sqlalchemy import select, and_
from .models.appointments import Appointments
from .services.telegram_bot import send_telegram_notification
from datetime import datetime, timedelta


async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Naznach Backend API",
    description="Backend API –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º",
    version="1.0.0"
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    await create_tables()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("static/uploads", exist_ok=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è Telegram
    try:
        await telegram_bot.bot.set_webhook(
            url=settings.telegram_webhook_url,
            secret_token=settings.telegram_webhook_secret
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ–∂–µ—Å—É—Ç–æ—á–Ω–æ, –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è)
    async def reminders_worker():
        while True:
            try:
                now = datetime.now()
                # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 09:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                next_run = now.replace(hour=9, minute=0, second=0, microsecond=0)
                if now >= next_run:
                    next_run = next_run + timedelta(days=1)
                sleep_seconds = (next_run - now).total_seconds()
                await asyncio.sleep(sleep_seconds)

                # –î–∞—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî –∑–∞–≤—Ç—Ä–∞
                target_date = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
                async with AsyncSessionLocal() as session:
                    from sqlalchemy import select, and_
                    result = await session.execute(
                        select(Appointments).where(
                            and_(
                                Appointments.date == target_date,
                                Appointments.status == 'active',
                                (Appointments.reminder_sent == False) | (Appointments.reminder_sent.is_(None))
                            )
                        )
                    )
                    appointments = result.scalars().all()

                    for appt in appointments:
                        price = (appt.service_price or '').strip()
                        valuta = (appt.service_valuta or '').strip()
                        price_line = f" {price} {valuta}".strip() if price or valuta else ''

                        message = (
                            f"<b>üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n\n"
                            f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {target_date}\n"
                            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appt.time}\n"
                            f"üíá <b>–£—Å–ª—É–≥–∞:</b> {appt.service_name or '-'}{price_line}\n"
                            f"üë§ <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> {appt.specialist_name or ''} {appt.specialist_last_name or ''}\n"
                            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {appt.specialist_address or '-'}\n"
                            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appt.specialist_phone or '-'}"
                        )

                        await send_telegram_notification(message, appt.client_id)
                        appt.reminder_sent = True
                        appt.reminder_sent_at = datetime.utcnow()

                    if appointments:
                        await session.commit()
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
                print(f"–û—à–∏–±–∫–∞ –≤ reminders_worker: {e}")
                await asyncio.sleep(60)

    asyncio.create_task(reminders_worker())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")

app.include_router(auth, prefix="/api")
app.include_router(appointments, prefix="/api")
app.include_router(services, prefix="/api")
app.include_router(users, prefix="/api")
app.include_router(specialists, prefix="/api")
app.include_router(grafik, prefix="/api")
app.include_router(telegram, prefix="/api")
app.include_router(specialist_auth, prefix="/api")
app.include_router(subscriptions_router, prefix="/api")
app.include_router(specialist_pages)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return RedirectResponse(url="/login")
    # return {
    #     "message": "Naznach Backend API",
    #     "version": "1.0.0",
    #     "status": "running"
    # }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {"status": "healthy"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
