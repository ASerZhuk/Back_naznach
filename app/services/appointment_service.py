from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from typing import Optional, List
from ..models.appointments import Appointments, AppointmentServices
from ..models.specialist import Specialist
from ..schemas.appointments import (
    AppointmentCreate, AppointmentUpdate, AppointmentResponse, 
    AppointmentRescheduleRequest, AppointmentCancelRequest
)
from ..services.telegram_bot import send_telegram_notification
import logging

logger = logging.getLogger(__name__)


class AppointmentService:
    
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def _find_specialist_chat_id(self, specialist_user_id: str) -> Optional[str]:
        try:
            result = await self.db.execute(
                select(Specialist.chat_id).where(Specialist.user_id == specialist_user_id)
            )
            chat_id = result.scalar_one_or_none()
            return chat_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist_user_id}: {e}")
            return None
    
    async def get_appointment_by_id(self, appointment_id: int) -> Optional[Appointments]:
        try:
            result = await self.db.execute(
                select(Appointments).where(Appointments.id == appointment_id)
            )
            return result.scalar_one_or_none()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {appointment_id}: {e}")
            raise
    
    async def get_user_appointments(self, client_id: str) -> List[Appointments]:
        try:
            result = await self.db.execute(
                select(Appointments).where(Appointments.client_id == client_id)
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_id}: {e}")
            raise
    
    async def get_specialist_appointments(self, specialist_id: str) -> List[Appointments]:
        try:
            result = await self.db.execute(
                select(Appointments).where(Appointments.specialist_id == specialist_id)
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist_id}: {e}")
            raise
        
    async def get_client_appointments(self, client_id: str) -> List[Appointments]:
        try:
            result = await self.db.execute(
                select(Appointments).where(Appointments.client_id == client_id)
            )
            return result.scalars().all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π {client_id}: {e}")
            raise    
    
    async def get_existing_appointments(self, specialist_id: str, date: str) -> List[dict]:
        try:
            result = await self.db.execute(
                select(Appointments.time).where(
                    and_(
                        Appointments.specialist_id == specialist_id,
                        Appointments.date == date,
                        Appointments.status == "active"
                    )
                )
            )
            appointments = result.scalars().all()
            return [{"time": time} for time in appointments]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            raise
    
    async def create_appointment(self, appointment_data: AppointmentCreate) -> Appointments:
        try:
            db_appointment = Appointments(**appointment_data.dict())
            self.db.add(db_appointment)
            await self.db.commit()
            await self.db.refresh(db_appointment)
            logger.info(f"–ó–∞–ø–∏—Å—å {db_appointment.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

            # –ö—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            try:
                price = (db_appointment.service_price or "").strip()
                valuta = (db_appointment.service_valuta or "").strip()
                price_line = f" {price} {valuta}".strip() if price or valuta else ""

                # –ö–ª–∏–µ–Ω—Ç—É
                client_message = (
                    f"<b>‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                    f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {db_appointment.date}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è:</b> {db_appointment.time}\n"
                    f"üíá <b>–£—Å–ª—É–≥–∞:</b> {db_appointment.service_name or '-'}{price_line}\n"
                    f"üë§ <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> {db_appointment.specialist_name or ''} {db_appointment.specialist_last_name or ''}\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {db_appointment.specialist_address or '-'}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {db_appointment.specialist_phone or '-'}"
                )
                await send_telegram_notification(client_message, db_appointment.client_id)

                # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
                specialist_chat_id = await self._find_specialist_chat_id(db_appointment.specialist_id)
                if specialist_chat_id:
                    specialist_message = (
                        f"<b>üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>\n\n"
                        f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {db_appointment.date}\n"
                        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {db_appointment.time}\n"
                        f"üôç <b>–ö–ª–∏–µ–Ω—Ç:</b> {db_appointment.first_name} {db_appointment.last_name}\n"
                        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {db_appointment.phone}\n"
                        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {db_appointment.service_name or '-'}{price_line}"
                    )
                    await send_telegram_notification(specialist_message, specialist_chat_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {db_appointment.id}: {e}")
            return db_appointment
        except Exception as e:
            await self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            raise
    
    async def delete_appointment(self, appointment_id: int) -> bool:
        try:
            appointment = await self.get_appointment_by_id(appointment_id)
            if not appointment:
                raise ValueError(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            await self.db.delete(appointment)
            await self.db.commit()
            logger.info(f"–ó–∞–ø–∏—Å—å {appointment_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            return True
        except Exception as e:
            await self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {appointment_id}: {e}")
            raise
    
    async def get_appointments_by_request(self, request: AppointmentCreate) -> List[Appointments]:
        try:
            if request.specialist_id:
                return await self.get_specialist_appointments(request.specialist_id)
            else:
                return await self.get_user_appointments(request.client_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {e}")
            raise
    
    async def reschedule_appointment(self, appointment_id: int, reschedule_data: AppointmentRescheduleRequest) -> Appointments:
        """–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è"""
        try:
            appointment = await self.get_appointment_by_id(appointment_id)
            if not appointment:
                raise ValueError(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            if appointment.status != "active":
                raise ValueError(f"–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {appointment.status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            appointment.date = reschedule_data.new_date
            appointment.time = reschedule_data.new_time
            # –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è active –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if reschedule_data.first_name is not None:
                appointment.first_name = reschedule_data.first_name
            if reschedule_data.last_name is not None:
                appointment.last_name = reschedule_data.last_name
            if reschedule_data.phone is not None:
                appointment.phone = reschedule_data.phone
            if reschedule_data.service_id is not None:
                appointment.service_id = reschedule_data.service_id
            if reschedule_data.service_name is not None:
                appointment.service_name = reschedule_data.service_name
            if reschedule_data.service_valuta is not None:
                appointment.service_valuta = reschedule_data.service_valuta
            if reschedule_data.service_price is not None:
                appointment.service_price = reschedule_data.service_price
            
            await self.db.commit()
            await self.db.refresh(appointment)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            client_message = (
                f"<b>üîÑ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞</b>\n\n"
                f"üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</b> {reschedule_data.new_date}\n"
                f"‚è∞ <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {reschedule_data.new_time}\n"
                f"üë§ <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> {appointment.specialist_name} {appointment.specialist_last_name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appointment.specialist_phone or '-'}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å:</b> {appointment.specialist_address or '-'}"
            )
            await send_telegram_notification(client_message, appointment.client_id)

            specialist_chat_id = await self._find_specialist_chat_id(appointment.specialist_id)
            if specialist_chat_id:
                specialist_message = (
                    f"<b>üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏</b>\n\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {reschedule_data.new_date}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è:</b> {reschedule_data.new_time}\n"
                    f"üôç <b>–ö–ª–∏–µ–Ω—Ç:</b> {appointment.first_name} {appointment.last_name}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appointment.phone}"
                )
                await send_telegram_notification(specialist_message, specialist_chat_id)
            
            logger.info(f"–ó–∞–ø–∏—Å—å {appointment_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞")
            return appointment
            
        except Exception as e:
            await self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–ø–∏—Å–∏ {appointment_id}: {e}")
            raise
    
    async def cancel_appointment(self, appointment_id: int, cancel_data: AppointmentCancelRequest) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            appointment = await self.get_appointment_by_id(appointment_id)
            if not appointment:
                raise ValueError(f"–ó–∞–ø–∏—Å—å {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            if appointment.status != "active":
                raise ValueError(f"–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {appointment.status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            appointment.status = "cancelled"
            
            await self.db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            client_message = (
                f"<b>‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {appointment.date}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appointment.time}\n"
                f"üë§ <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> {appointment.specialist_name} {appointment.specialist_last_name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appointment.specialist_phone or '-'}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å:</b> {appointment.specialist_address or '-'}\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {cancel_data.reason}"
            )
            await send_telegram_notification(client_message, appointment.client_id)

            specialist_chat_id = await self._find_specialist_chat_id(appointment.specialist_id)
            if specialist_chat_id:
                specialist_message = (
                    f"<b>‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</b>\n\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {appointment.date}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appointment.time}\n"
                    f"üôç <b>–ö–ª–∏–µ–Ω—Ç:</b> {appointment.first_name} {appointment.last_name}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appointment.phone}\n"
                    f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {cancel_data.reason}"
                )
                await send_telegram_notification(specialist_message, specialist_chat_id)
            
            logger.info(f"–ó–∞–ø–∏—Å—å {appointment_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            await self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ {appointment_id}: {e}")
            raise
