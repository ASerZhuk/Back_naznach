from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup
from ..core.config import settings
import asyncio
from typing import Optional
from aiogram.client.session.aiohttp import AiohttpSession


class TelegramBotService:
    def __init__(self):
        # –û–±—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –≤–µ–±—Ö—É–∫–æ–≤
        self.bot = Bot(token=settings.telegram_bot_token, session=AiohttpSession())
    
    async def send_message(self, chat_id: str, text: str, parse_mode: Optional[str] = "HTML", reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup,
                disable_web_page_preview=True,
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_notification(self, chat_id: str, message: str, parse_mode: Optional[str] = "HTML", reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n{message}",
                parse_mode=parse_mode,
                reply_markup=reply_markup,
                disable_web_page_preview=True,
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        await self.bot.session.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBotService()


async def send_telegram_notification(message: str, chat_id: Optional[str] = None, parse_mode: Optional[str] = "HTML", reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    if not chat_id:
        return False
    
    return await telegram_bot.send_notification(chat_id, message, parse_mode=parse_mode, reply_markup=reply_markup)


async def send_telegram_message(chat_id: str, text: str, parse_mode: Optional[str] = "HTML", reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    return await telegram_bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
