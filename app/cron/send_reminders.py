import asyncio
from datetime import datetime, timedelta, timezone
from sqlalchemy import select, and_
from ..core.database import AsyncSessionLocal
from ..models.appointments import Appointments
from ..services.telegram_bot import send_telegram_notification, telegram_bot


def format_date_ru(date_str: str) -> str:
    # date_str: dd.mm.yyyy
    try:
        d, m, y = map(int, date_str.split('.'))
        dt = datetime(y, m, d)
        return dt.strftime('%d.%m.%Y')
    except Exception:
        return date_str


async def send_reminders_for_date(target_date_str: str):
    async with AsyncSessionLocal() as session:
        # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ target_date_str –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        result = await session.execute(
            select(Appointments).where(
                and_(
                    Appointments.date == target_date_str,
                    Appointments.status == 'active',
                    (Appointments.reminder_sent == False) | (Appointments.reminder_sent.is_(None))
                )
            )
        )
        appointments = result.scalars().all()

        for appt in appointments:
            price = (appt.service_price or '').strip()
            valuta = (appt.service_valuta or '').strip()
            price_line = f" {price} {valuta}".strip() if price or valuta else ''

            message = (
                f"<b>üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n\n"
                f"üóìÔ∏è <b>–î–∞—Ç–∞:</b> {format_date_ru(appt.date)}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appt.time}\n"
                f"üíá <b>–£—Å–ª—É–≥–∞:</b> {appt.service_name or '-'}{price_line}\n"
                f"üë§ <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> {appt.specialist_name or ''} {appt.specialist_last_name or ''}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {appt.specialist_address or '-'}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appt.specialist_phone or '-'}"
            )

            # —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—É
            await send_telegram_notification(message, appt.client_id)

            # –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            appt.reminder_sent = True
            appt.reminder_sent_at = datetime.now(timezone.utc)

        if appointments:
            await session.commit()


async def main():
    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy (–ª–æ–∫–∞–ª—å–Ω–æ)
    now = datetime.now()
    tomorrow = now + timedelta(days=1)
    target_date_str = tomorrow.strftime('%d.%m.%Y')
    await send_reminders_for_date(target_date_str)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é Telegram –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    try:
        await telegram_bot.close()
    except Exception:
        pass


if __name__ == '__main__':
    asyncio.run(main())


